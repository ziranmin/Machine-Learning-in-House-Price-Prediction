{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import norm\n",
    "from scipy import stats\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('train_cleaned.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = train.values[:, :-2]\n",
    "y = train.values[:, -2]\n",
    "y = y.reshape((1456,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1456, 202)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1456, 1)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def threshold(rho,lambdaa):\n",
    "    if rho >  lamda:\n",
    "        return (rho - lambdaa)\n",
    "    elif rho < - lamda:\n",
    "        return (rho + lambdaa)\n",
    "    else: \n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def coordinate_descent(x, y, theta, lambdaa = .01, num_iter=1000, intercept = False):\n",
    "    m,n = x.shape\n",
    "    x = x / (np.linalg.norm(x, axis = 0)) \n",
    "    for i in range(num_iter): \n",
    "        for j in range(n):\n",
    "            x_j = x[:,j].reshape(-1,1)\n",
    "            y_pred = x @ theta\n",
    "            rho = x_j.T @ (y - y_pred  + theta[j]*x_j)\n",
    "            if intercept == True:  \n",
    "                if j == 0: \n",
    "                    theta[j] =  rho \n",
    "                else:\n",
    "                    theta[j] =  soft_threshold(rho, lambdaa)  \n",
    "            if intercept == False:\n",
    "                theta[j] =  soft_threshold(rho, lambdaa)     \n",
    "    return theta.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "m,n = x.shape\n",
    "init_theta = np.ones((n,1))\n",
    "theta_list = list()\n",
    "lambdaa = np.logspace(0,5,200)/10 \n",
    "\n",
    "for l in lamda:\n",
    "    theta = coordinate_descent(x, y, init_theta,lambdaa = l, num_iters = 1000)\n",
    "    theta_list.append(theta)\n",
    "\n",
    "lasso_theta = np.stack(theta_list).T\n",
    "\n",
    "n,_ = lasso_theta.shape\n",
    "plt.figure(figsize = (20,12))\n",
    "\n",
    "for i in range(n):\n",
    "    plt.plot(lambdaa, lasso_theta[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
